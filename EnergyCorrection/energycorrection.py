import numpy as np
import pandas as pd
import os 
import sys
import argparse

def getArguments():
    #define command line arguments
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
    parser.add_argument("--infile", type=str, default="", help="h5 file")
    parser.add_argument("--outfile", type=str, default="", help="output file")
    

    #if no command line arguments are present, config file is parsed
    config_file='config.txt'
    fromFile=False
    if len(sys.argv) == 1:
        fromFile=True
    if len(sys.argv) == 2 and sys.argv[1].find('--') == -1:
        config_file=sys.argv[1]
        fromFile=True

    if fromFile is True:
        print("Try to read configuration from ",config_file, "file")
        if os.path.isfile(config_file):
            args = parser.parse_args(["@"+config_file])
        else:
            args = parser.parse_args(["--help"])
    else:
        args = parser.parse_args()
        
    return args

#Read eta mu and rc generated by another script and stored inside a file
def readAtomicEnergy(file):
    atomicEnergies = np.zeros(118)
    data = pd.read_csv('atomicEnergies.txt', delimiter='    ', engine='python', header=None)
    for i, row in data.iterrows():
        atomicEnergies[int(row[0])] = row[1]
    
    return atomicEnergies

def correctEnergy(Etot, atoms, atomicEnergies):
    atomicE = 0
    for atom in atoms:
        atomicE += atomicEnergies[int(atom)]
    return Etot - atomicE

args = getArguments()

atomicEnergies = readAtomicEnergy('')

df = pd.read_hdf(args.infile, 'df')
Z = np.array(df.loc[:, 'Atoms'])
Etot = np.array(df.loc[:, 'Energy'])

E = []

for i in range(len(Z)):
    E.append(correctEnergy(Etot[i], Z[i], atomicEnergies))

df.rename(columns={'Energy': 'Total Energy'},inplace=True)
df['Energy'] = E
df.to_hdf(args.outfile, 'df')